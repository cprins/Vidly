
@{
    ViewBag.Title = "Nuevo alquiler";
}

<h2>Nuevo alquiler</h2>


<form id="newRental">
    <div class="form-group">
        <label>Cliente</label>
        <div class="tt-container">
            <input id="customer" data-rule-validCustomer="true"  name="customer" required type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="form-group">
        <label>Pelicula</label>
        <div class="tt-container">
            <input id="movie"  data-rule-validMovie="true"  name="movie" type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-4 col-sm-4">
            <ul id="movies" class="list-group"></ul>
        </div>
    </div>


    <button class="btn btn-primary">Registrar Alquiler</button>
</form>

@section scripts

{
    @Scripts.Render("~/bundles/jqueryval")

    @* Esta es la funcion de autocompletar*@
    <script>
        $(document).ready(function () {

            var vm = {
                movieIds: []
            };

            var customers = new Bloodhound({
                @* name, es el nombre del campo que queremos que autocomplete *@
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    @* url: la fuente de donde tomara la informacion, en este caso el api de clientes. QUERY es para filtrar *@
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            var movies = new Bloodhound({
                @* name, es el nombre del campo que queremos que autocomplete *@
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    @* url: la fuente de donde tomara la informacion, en este caso el api de clientes.QUERY es para filtrar *@
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead({
                minLength: 3,
                highlight: true
            }, {
                @* Se coloca el nombre que tendra el objeto, el valor que tomara, y la fuente de donde lo tomara *@
                    name: 'customers',
                    display: 'name',
                    source: customers
                }).on("typeahead:select", function (e, customer) {
                    vm.customerId = customer.id;
                });


            $('#movie').typeahead({
                minLength: 3,
                highlight: true
            }, {
                @* Se coloca el nombre que tendra el objeto, el valor que tomara, y la fuente de donde lo tomara *@
                    name: 'movies',
                    display: 'name',
                    source: movies
                }).on("typeahead:select", function (e, movie) {
                 @* Se agrega en la lista la seleccion de pelicula*@
                    $("#movies").append("<li class= 'list-group-item'>" + movie.name + "</li>");

                 @* Para borrar el valor que se incluyo en el texto, para que luego pueda incluir otro*@
                    $("#movie").typeahead("val", "");

                 @* Para guardar el id de la pelicula en la lista *@
                    vm.movieIds.push(movie.id);

                });

           @*  Se valida que se seleccione un cliente valido  *@
            $.validator.addMethod("validCustomer", function () {
                return vm.customerId && vm.customerId !== 0;
            }, "Por favor seleccionar un cliente valido."); 

           @*  Se valida que se seleccione por lo menos una pelicula *@
            $.validator.addMethod("validMovie", function () {
                return vm.movieIds.length >0
            }, "Por favor seleccionar al menos una pelicula.");

            @* Para que se valide del lado del cliente segun las propiedades del html*@
           var validator = $("#newRental").validate({

                @* Para que luego de validar haga el submit *@
                submitHandler: function () {
                    /* para prevenir el submit normalmente, ya que lo haremos por ajax */
                    

                    $.ajax({
                        url: "/api/NewRentals",
                        method: "post",
                        data: vm

                    })
                        .done(function () {
                            @* console.log("done") *@
                            toastr.success("Alquiler registrado satisfactoriamente.");

                            @* Para resetar los campos y la lista de peliculas cuando es exitoso *@
                            $("#customer").typeahead("val", "");
                            $("#movie").typeahead("val", "");
                            $("#movies").empty();

                            vm = { movieIds: [] };

                            @* Se resetea el estado de la forma a su estado inicial *@
                            validator.resetForm();

                        })
                        .fail(function () {
                            toastr.error("Ocurrio error al tratar de registrar el alquiler.");
                        });
                    @* Se coloca el retur false para que no se realice el submit normalmente sino por el ajax *@
                    return false;
                }

            });

        });
    </script>
}